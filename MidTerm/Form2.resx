<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="CopyBtnCode2.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAL
        EAAACxABrSO9dQAAAHlJREFUSEvtlAkKgCAURD1e0v0vYN3DpnxgC2L8IjB88EFzFkjQ/YcY46iZNSaI
        KSPNlKQ2iCmDri60Qv53BVpa72T91Z6YTDo7FDy5k0BMhoN9wQbb22C7+vjeC3pBHWy9oAy2ug9d2wXv
        PnZnJPIaS0nQDMQ0j3ML8+6oy9NQh2wAAAAASUVORK5CYII=
</value>
  </data>
  <data name="CopyBtnCode1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAL
        EQAACxEBf2RfkQAAAHlJREFUSEvtlAkKgCAURD1e0v0vYN3DpnxgC2L8IjB88EFzFkjQ/YcY46iZNSaI
        KSPNlKQ2iCmDri60Qv53BVpa72T91Z6YTDo7FDy5k0BMhoN9wQbb22C7+vjeC3pBHWy9oAy2ug9d2wXv
        PnZnJPIaS0nQDMQ0j3ML8+6oy9NQh2wAAAAASUVORK5CYII=
</value>
  </data>
  <data name="richTextBox1.Text" xml:space="preserve">
    <value>private void TestHoverBtn_MouseHover(object sender, EventArgs e)
{
    Guna2Button btn = (Guna2Button)sender;
    btn.FillColor = Color.Black; //Đổi màu Button
}

private void TestHoverBtn_MouseLeave(object sender, EventArgs e)
{
    Guna2Button btn = (Guna2Button)sender;
    btn.FillColor = Color.FromArgb(94,148,255); 
}
</value>
  </data>
  <data name="richTextBox2.Text" xml:space="preserve">
    <value>private void TestHoverBorder_MouseEnter(object sender, EventArgs e)
{
    Guna2Button btn = (Guna2Button)sender;
    btn.FillColor = Color.White; //Đổi màu Button
    btn.ForeColor = Color.FromArgb(94, 148, 255); //Đổi màu chữ
    //Đổi màu border
    btn.BorderColor = Color.FromArgb(94, 148, 255); 
}

private void TestHoverBorder_MouseLeave(object sender, EventArgs e)
{
    Guna2Button btn = (Guna2Button)sender;
    btn.FillColor = Color.FromArgb(94, 148, 255);
    btn.ForeColor = Color.White;
    btn.BorderColor = Color.Transparent;
}</value>
  </data>
  <data name="guna2TextBox1.DefaultText" xml:space="preserve">
    <value>Hover Button: Là một event giúp người dùng nhận biết được họ đang ở trên Button nào, giúp cải thiện trải nghiệm cho người dùng.

Cách sử dụng: Để có thể làm cho Button hiểu được event Hover, ta cần sử dụng 2 events:
+ MouseEnter: Event khi trỏ chuột tiến vào Button. (Thay đổi giá trị properties để Button thay đổi so với ban đầu)
+ MouseLeave: Event khi trỏ chuột rời khỏi Button. (Trả các properties về giá trị ban đầu)

</value>
  </data>
  <metadata name="DropdownInf.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
</root>